const fs = require('fs-extra');
const path = require('path');

/**
 * Generates a project-specific CLAUDE.md file based on analysis
 */
async function generateClaudeMd(analysis, projectPath) {
  const projectName = path.basename(projectPath);
  const template = await getTemplate(analysis.type);
  
  const content = template
    .replace(/\[PROJECT_NAME\]/g, projectName)
    .replace(/\[PROJECT_TYPE\]/g, analysis.type)
    .replace(/\[FRAMEWORKS\]/g, analysis.frameworks.join(', ') || 'None detected')
    .replace(/\[LANGUAGES\]/g, analysis.languages.join(', ') || 'Unknown')
    .replace(/\[PACKAGE_MANAGER\]/g, analysis.packageManager || 'Unknown')
    .replace(/\[DEPENDENCIES\]/g, formatDependencies(analysis.dependencies))
    .replace(/\[STRUCTURE\]/g, formatStructure(analysis.structure))
    .replace(/\[RECOMMENDATIONS\]/g, formatRecommendations(analysis.recommendations));

  return content;
}

async function getTemplate(projectType) {
  const templatePath = path.join(__dirname, '../../templates', `${projectType}.md`);
  
  // Try project-specific template first
  if (await fs.pathExists(templatePath)) {
    return await fs.readFile(templatePath, 'utf-8');
  }
  
  // Fall back to generic template
  const genericPath = path.join(__dirname, '../../templates', 'generic.md');
  if (await fs.pathExists(genericPath)) {
    return await fs.readFile(genericPath, 'utf-8');
  }
  
  // Ultimate fallback - inline template
  return getInlineTemplate();
}

function formatDependencies(dependencies) {
  const deps = Object.keys(dependencies).slice(0, 10); // Top 10
  if (deps.length === 0) return 'None detected';
  
  return deps.map(dep => `- **${dep}**: ${dependencies[dep] === true ? 'Latest' : dependencies[dep]}`).join('\n');
}

function formatStructure(structure) {
  const items = [];
  if (structure.hasSource) items.push('‚úÖ Source code organization');
  if (structure.hasTests) items.push('‚úÖ Test files present');
  if (structure.hasDocs) items.push('‚úÖ Documentation exists');
  if (structure.hasConfig) items.push('‚úÖ Configuration files');
  
  return items.length > 0 ? items.join('\n') : 'Basic project structure detected';
}

function formatRecommendations(recommendations) {
  if (recommendations.length === 0) return 'No specific recommendations at this time.';
  
  return recommendations.map(rec => `- **${rec.type}**: ${rec.message}`).join('\n');
}

function getInlineTemplate() {
  return `# CLAUDE.md - [PROJECT_NAME]

> This document provides context and guidelines for Claude Code working on this project.

## üéØ Project Overview

**Project Name:** [PROJECT_NAME]
**Type:** [PROJECT_TYPE]
**Languages:** [LANGUAGES]
**Frameworks:** [FRAMEWORKS]
**Package Manager:** [PACKAGE_MANAGER]

## üèóÔ∏è Architecture & Structure

### Key Dependencies
[DEPENDENCIES]

### Project Structure
[STRUCTURE]

## üìã Development Standards

### Code Style
- Follow existing patterns in the codebase
- Maintain consistency with current naming conventions
- Add appropriate comments for complex logic
- Ensure all new code has proper error handling

### Quality Gates
- [ ] All existing tests pass
- [ ] New code has appropriate test coverage
- [ ] Code follows project style guidelines
- [ ] No linting errors or warnings
- [ ] Documentation updated if needed

## üõ†Ô∏è Common Tasks

### Development Commands
\`\`\`bash
# Install dependencies
${getInstallCommand('[PACKAGE_MANAGER]')}

# Run development server
${getDevCommand('[PACKAGE_MANAGER]')}

# Run tests
${getTestCommand('[PACKAGE_MANAGER]')}

# Build for production
${getBuildCommand('[PACKAGE_MANAGER]')}
\`\`\`

## üß≠ Current Recommendations

[RECOMMENDATIONS]

## ‚ö†Ô∏è Important Notes

- Always understand the existing code before making changes
- Preserve functionality - the code works today, don't break it
- Choose the simplest solution that solves the actual problem
- Focus on user experience and maintainability

## üîå Advanced Integrations (Optional)

### MCP Servers
To extend Claude Code with additional capabilities, consider these MCP servers:

**Database Integration:**
- \`@modelcontextprotocol/server-postgres\` - PostgreSQL integration
- \`@modelcontextprotocol/server-sqlite\` - SQLite integration

**Development Tools:**
- \`@modelcontextprotocol/server-github\` - GitHub API integration
- \`@modelcontextprotocol/server-filesystem\` - Enhanced file operations

**Setup:** Add to your Claude Code MCP configuration as needed.
**Note:** Each requires separate configuration and API keys.

### API Keys
If your project uses external APIs, add them to \`.claude/settings.local.json\`:
\`\`\`json
{
  "apiKeys": {
    "// OPENAI_API_KEY": "your-key-here",
    "// GITHUB_TOKEN": "your-token-here"
  }
}
\`\`\`

---
*Generated by Claude Setup v1.0.0*`;
}

function getInstallCommand(packageManager) {
  switch (packageManager) {
    case 'yarn': return 'yarn install';
    case 'pnpm': return 'pnpm install';
    default: return 'npm install';
  }
}

function getDevCommand(packageManager) {
  switch (packageManager) {
    case 'yarn': return 'yarn dev';
    case 'pnpm': return 'pnpm dev';
    default: return 'npm run dev';
  }
}

function getTestCommand(packageManager) {
  switch (packageManager) {
    case 'yarn': return 'yarn test';
    case 'pnpm': return 'pnpm test';
    default: return 'npm test';
  }
}

function getBuildCommand(packageManager) {
  switch (packageManager) {
    case 'yarn': return 'yarn build';
    case 'pnpm': return 'pnpm build';
    default: return 'npm run build';
  }
}

module.exports = {
  generateClaudeMd,
  getTemplate,
  formatDependencies,
  formatStructure,
  formatRecommendations
};
